{"version":3,"sources":["App.js","getWeb3.js","components/NavBar.js","box.png","components/Main.js","components/helpers.js","serviceWorker.js","index.js"],"names":["client","create","App","state","web3","accounts","contract","filesCount","files","buffer","type","name","loading","componentDidMount","a","getWeb3","eth","getAccounts","net","getId","networkId","deployedNetwork","BlockStorage","networks","instance","Contract","abi","address","setState","methods","fileCount","call","i","file","alert","console","error","captureFile","event","preventDefault","target","reader","window","FileReader","readAsArrayBuffer","onloadend","Buffer","result","log","uploadFile","description","add","added","path","size","send","from","on","hash","location","reload","e","this","className","account","id","Component","Promise","resolve","reject","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","Navbar","style","backgroundColor","href","rel","src","box","width","height","alt","props","substring","Identicon","toString","module","exports","Main","role","maxWidth","onSubmit","fileDescription","value","ref","input","placeholder","required","onChange","maxHeight","fontSize","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.894c480e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport BlockStorage from \"./contracts/BlockStorage.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\nimport Navbar from \"./components/NavBar\";\nimport Main from \"./components/Main\";\n\n//Declare IPFS\nimport { create } from \"ipfs-http-client\";\n\n/* Create an instance of the client */\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    filesCount: 0,\n    files: [],\n    buffer: null,\n    type: null,\n    name: null,\n    loading: false,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = BlockStorage.networks[networkId];\n      if (deployedNetwork) {\n        const instance = new web3.eth.Contract(\n          BlockStorage.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n\n        // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance });\n\n        // Get files amount\n        const filesCount = await instance.methods.fileCount().call();\n        this.setState({ filesCount });\n        // Load files&sort by the newest\n        for (var i = filesCount; i >= 1; i--) {\n          const file = await instance.methods.files(i).call();\n          this.setState({\n            files: [...this.state.files, file],\n          });\n        }\n      } else {\n        this.setState({\n          web3: \"\",\n        });\n        alert(\"App does not exeist on this network\");\n      }\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  // Get file from user\n  captureFile = (event) => {\n    event.preventDefault();\n\n    const file = event.target.files[0];\n    const reader = new window.FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name,\n      });\n      console.log(\"buffer\", this.state.buffer);\n    };\n  };\n\n  uploadFile = async (description) => {\n    console.log(\"Submitting file to IPFS...\");\n\n    // upload the file\n    const added = await client.add(this.state.buffer);\n\n    this.setState({ loading: true });\n    // Assign value for the file without extension\n    if (this.state.type === \"\") {\n      this.setState({ type: \"none\" });\n    }\n    this.state.contract.methods\n      .uploadFile(\n        added.path,\n        added.size,\n        this.state.type,\n        this.state.name,\n        description\n      )\n      .send({ from: this.state.accounts[0] })\n      .on(\"transactionHash\", (hash) => {\n        this.setState({\n          loading: false,\n          type: null,\n          name: null,\n        });\n        window.location.reload();\n      })\n      .on(\"error\", (e) => {\n        window.alert(\"Error\");\n        this.setState({ loading: false });\n      });\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    } else {\n      return (\n        <div className=\"App\">\n          <Navbar account={this.state.accounts[0]} />\n          {this.state.loading ? (\n            <div id=\"loader\" className=\"text-center mt-5\">\n              <p>Loading...</p>\n            </div>\n          ) : (\n            <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n              account={this.state.accounts[0]}\n            />\n          )}\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport Identicon from \"identicon.js\";\r\nimport box from \"../box.png\";\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav\r\n        className=\"navbar navbar-dark p-0 text-monospace\"\r\n        style={{ backgroundColor: \"#03045e\" }}\r\n      >\r\n        <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"#\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          BlockStorage\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n          <li>\r\n            <small id=\"account\">\r\n              <a\r\n                target=\"_blank\"\r\n                alt=\"\"\r\n                className=\"text-white\"\r\n                rel=\"noopener noreferrer\"\r\n                href={\"https://etherscan.io/address/\" + this.props.account}\r\n              >\r\n                {this.props.account.substring(0, 6)}...\r\n                {this.props.account.substring(38, 42)}\r\n              </a>\r\n            </small>\r\n            {this.props.account ? (\r\n              <img\r\n                alt=\"\"\r\n                className=\"ml-2\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                src={`data:image/png;base64,${new Identicon(\r\n                  this.props.account,\r\n                  30\r\n                ).toString()}`}\r\n              />\r\n            ) : (\r\n              <span></span>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","module.exports = __webpack_public_path__ + \"static/media/box.5aa8aa75.png\";","import React, { Component } from \"react\";\r\nimport { convertBytes } from \"./helpers\";\r\nimport moment from \"moment\";\r\n\r\nclass Main extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid mt-5 text-center\">\r\n        <div className=\"row\">\r\n          <main\r\n            role=\"main\"\r\n            className=\"col-lg-12 ml-auto mr-auto  m-auto\"\r\n            style={{ maxWidth: \"1024px\" }}\r\n          >\r\n            <div className=\"content border mr-auto ml-auto\">\r\n              <p>&nbsp;</p>\r\n              <div\r\n                className=\"card mb-3 mx-auto \"\r\n                style={{ maxWidth: \"512px\", backgroundColor: \"#0077b6\" }}\r\n              >\r\n                <h2 className=\"text-white text-monospace \">\r\n                  <b>\r\n                    <ins>Share File</ins>\r\n                  </b>\r\n                </h2>\r\n                <form\r\n                  onSubmit={(event) => {\r\n                    event.preventDefault();\r\n                    const description = this.fileDescription.value;\r\n                    this.props.uploadFile(description);\r\n                  }}\r\n                >\r\n                  <div className=\"form-group\">\r\n                    <br></br>\r\n                    <input\r\n                      id=\"fileDescription\"\r\n                      type=\"text\"\r\n                      ref={(input) => {\r\n                        this.fileDescription = input;\r\n                      }}\r\n                      className=\"form-control text-monospace\"\r\n                      placeholder=\"description...\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <input\r\n                    type=\"file\"\r\n                    onChange={this.props.captureFile}\r\n                    className=\"text-white text-monospace\"\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn-primary btn-block bg-dark\"\r\n                  >\r\n                    <b>Upload!</b>\r\n                  </button>\r\n                </form>\r\n              </div>\r\n              <p>&nbsp;</p>\r\n              <div className=\"table-responsive w-100\">\r\n                <table\r\n                  className=\"table-sm table-bordered text-monospace table-striped\"\r\n                  style={{ maxHeight: \"450px\" }}\r\n                >\r\n                  <thead style={{ fontSize: \"15px\" }}>\r\n                    <tr className=\"bg-dark text-white\">\r\n                      <th scope=\"col\" style={{ width: \"10px\" }}>\r\n                        id\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"200px\" }}>\r\n                        name\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"230px\" }}>\r\n                        description\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"120px\" }}>\r\n                        type\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"90px\" }}>\r\n                        size\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"90px\" }}>\r\n                        date\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"120px\" }}>\r\n                        uploader/view\r\n                      </th>\r\n                      <th scope=\"col\" style={{ width: \"120px\" }}>\r\n                        hash/view/get\r\n                      </th>\r\n                    </tr>\r\n                  </thead>\r\n                  {this.props.files.map((file, key) => {\r\n                    return (\r\n                      <thead style={{ fontSize: \"12px\" }} key={key}>\r\n                        <tr>\r\n                          <td>{file.fileId}</td>\r\n                          <td>{file.fileName}</td>\r\n                          <td>{file.fileDescription}</td>\r\n                          <td>{file.fileType}</td>\r\n                          <td>{convertBytes(file.fileSize)}</td>\r\n                          <td>\r\n                            {moment\r\n                              .unix(file.uploadTime)\r\n                              .format(\"h:mm:ss A M/D/Y\")}\r\n                          </td>\r\n                          <td>\r\n                            <a\r\n                              href={\r\n                                \"https://etherscan.io/address/\" + file.uploader\r\n                              }\r\n                              rel=\"noopener noreferrer\"\r\n                              target=\"_blank\"\r\n                            >\r\n                              {file.uploader.substring(0, 10)}...\r\n                            </a>\r\n                          </td>\r\n                          <td>\r\n                            {this.props.account == file.uploader && (\r\n                              <a\r\n                                href={\r\n                                  \"https://ipfs.infura.io/ipfs/\" + file.fileHash\r\n                                }\r\n                                rel=\"noopener noreferrer\"\r\n                                target=\"_blank\"\r\n                              >\r\n                                <button className=\"btn btn-primary btn-sm\">\r\n                                  Download\r\n                                </button>\r\n                              </a>\r\n                            )}\r\n\r\n                            {this.props.account != file.uploader && (\r\n                              <span>file.fileHash.substring(0, 10)...</span>\r\n                            )}\r\n                          </td>\r\n                        </tr>\r\n                      </thead>\r\n                    );\r\n                  })}\r\n                </table>\r\n              </div>\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","export function convertBytes(bytes) {\r\n  var sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"];\r\n  if (bytes === 0) return \"0 Byte\";\r\n  var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n  return Math.round(bytes / Math.pow(1024, i), 2) + \" \" + sizes[i];\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}